const axios = require("axios");

const DOLIBARR_API = process.env.DOLIBARR_API;
const DOLAPIKEY = process.env.DOLIBARR_TOKEN;

const headers = {
  DOLAPIKEY,
  "Content-Type": "application/json",
  Accept: "application/json"
};

exports.handler = async function (event) {
  console.log("üöÄ create-order lanc√©");

  if (event.httpMethod !== "POST") {
    return { statusCode: 405, body: "M√©thode non autoris√©e" };
  }

  let data;
  try {
    data = JSON.parse(event.body);
    console.log("üì• Body re√ßu et pars√© :", data);
  } catch (err) {
    console.error("‚ùå JSON invalide :", err.message);
    return { statusCode: 400, body: JSON.stringify({ error: "JSON invalide" }) };
  }

  const { customer, cart, paiement } = data;

  if (!customer || !Array.isArray(cart) || cart.length === 0) {
    return {
      statusCode: 400,
      body: JSON.stringify({ error: "Param√®tres client ou panier manquants" })
    };
  }

  console.log("üí≥ Mode de paiement :", paiement);

  const clientEmail = customer.email.trim().toLowerCase();
  const fullName = `${customer.prenom} ${customer.nom}`;
  let clientId;

  // üîç Rechercher ou cr√©er le client
  try {
    console.log("üîç V√©rification client existant via email :", clientEmail);
    const res = await axios.get(`${DOLIBARR_API}/thirdparties?limit=100`, { headers });
    const existing = res.data.find(c => (c.email || "").toLowerCase() === clientEmail);

    if (existing) {
      clientId = existing.id;
      console.log("‚úÖ Client existant trouv√© :", clientId);
    } else {
      throw new Error("Aucun client correspondant");
    }
  } catch (err) {
    if (err.response?.status === 404 || err.message.includes("Aucun client")) {
      console.log("‚ö†Ô∏è Aucun client trouv√©. Cr√©ation d‚Äôun nouveau client...");
      try {
        const newClient = {
          name: fullName,
          email: clientEmail,
          client: 1,
          status: 1,
          zip: "0000",
          town: "Tunis",
          address: customer.adresse || "Adresse non renseign√©e",
          country_id: 1
        };

        console.log("üì§ Payload cr√©ation client :", newClient);

        const createRes = await axios.post(`${DOLIBARR_API}/thirdparties`, newClient, { headers });

        console.log("üì• R√©sultat cr√©ation client :", createRes.data);

        clientId = typeof createRes.data === "number" ? createRes.data : createRes.data?.id;
        console.log("‚úÖ Nouveau client cr√©√© avec ID :", clientId);
      } catch (creationErr) {
        console.error("‚ùå √âchec cr√©ation client :", creationErr.response?.data || creationErr.message);
        return {
          statusCode: 500,
          body: JSON.stringify({ error: "Erreur cr√©ation client", details: creationErr.message })
        };
      }
    } else {
      console.error("‚ùå Erreur Dolibarr client :", err.response?.data || err.message);
      return {
        statusCode: 500,
        body: JSON.stringify({ error: "Erreur Dolibarr client", details: err.message })
      };
    }
  }

  // üßæ Construire les lignes de facture
  const lines = [];

  try {
    console.log("üì¶ Traitement des produits :", cart.length);
    for (const item of cart) {
      const productRes = await axios.get(`${DOLIBARR_API}/products/${item.id}`, { headers });
      const product = productRes.data;

      lines.push({
        fk_product: product.id,
        label: product.label || product.ref,
        qty: item.qty,
        subprice: parseFloat(product.price),
        tva_tx: parseFloat(product.tva_tx) || 19.0,
        product_type: product.fk_product_type || 0
      });

      console.log("‚úÖ Produit ajout√© :", product.label);
    }
  } catch (err) {
    console.error("‚ùå Erreur Dolibarr produits :", err.response?.data || err.message);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: "Erreur Dolibarr produits", details: err.message })
    };
  }

  // üßæ Cr√©ation de la facture
  let factureId;
  try {
    console.log("üßæ Cr√©ation facture brouillon...");
    const invoice = {
      socid: clientId,
      date: new Date().toISOString().split("T")[0],
      type: 0,
      status: 0,
      lines,
      note_public: `Commande via site - Paiement : ${paiement?.toUpperCase() || "NON PR√âCIS√â"} - Client : ${fullName}`
    };

    const res = await axios.post(`${DOLIBARR_API}/invoices`, invoice, { headers });
    factureId = typeof res.data === "number" ? res.data : res.data?.id;

    console.log("‚úÖ Facture cr√©√©e avec ID :", factureId);
  } catch (err) {
    console.error("‚ùå Erreur Dolibarr facture :", err.response?.data || err.message);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: "Erreur cr√©ation facture", details: err.message })
    };
  }

  // ‚úÖ VALIDATION FACTURE
  try {
    console.log("üîê Validation de la facture...");
    const validateRes = await axios.post(`${DOLIBARR_API}/invoices/${factureId}/validate`, {}, { headers });
    console.log("‚úÖ Facture valid√©e :", validateRes.data);

    // üñ®Ô∏è G√©n√©ration PDF
    try {
      console.log("üñ®Ô∏è G√©n√©ration PDF...");
      await axios.get(`${DOLIBARR_API}/invoices/${factureId}/generate-pdf`, { headers });
      console.log("‚úÖ PDF g√©n√©r√©");

      // üí≥ Si paiement CB ‚Üí enregistrer paiement
      if (paiement === "cb") {
        console.log("üí≥ Paiement CB ‚Üí enregistrement paiement...");
        const paiementPayload = {
          facid: factureId,
          datepaye: new Date().toISOString().split("T")[0],
          paiementid: 6, // 6 = CB
          amount: parseFloat(customer.amount),
          accountid: 1 // √† adapter selon ton compte bancaire
        };

        const payRes = await axios.post(`${DOLIBARR_API}/payments`, paiementPayload, { headers });
        console.log("‚úÖ Paiement enregistr√© :", payRes.data);

        return {
          statusCode: 200,
          body: JSON.stringify({
            success: true,
            invoiceId: factureId,
            status: "pay√©e",
            pdf: `${DOLIBARR_API}/documents/facture/${factureId}/pdf`
          })
        };
      } else {
        return {
          statusCode: 200,
          body: JSON.stringify({
            success: true,
            invoiceId: factureId,
            status: "valid√©e (impay√©e)",
            pdf: `${DOLIBARR_API}/documents/facture/${factureId}/pdf`
          })
        };
      }
    } catch (pdfErr) {
      console.error("‚ùå Erreur PDF :", pdfErr.response?.data || pdfErr.message);
      return {
        statusCode: 500,
        body: JSON.stringify({ error: "Erreur g√©n√©ration PDF", invoiceId: factureId })
      };
    }
  } catch (err) {
    console.error("‚ö†Ô∏è Facture cr√©√©e mais erreur validation :", err.response?.data || err.message);
    return {
      statusCode: 500,
      body: JSON.stringify({ error: "Facture cr√©√©e mais non valid√©e", invoiceId: factureId })
    };
  }
};
